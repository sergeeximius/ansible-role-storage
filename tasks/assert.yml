---

- name: test if storage_default_fstype is set correctly
  ansible.builtin.assert:
    that:
      - storage_default_fstype is defined
      - storage_default_fstype is string
      - storage_default_fstype in [ "btrfs", "cramfs", "ext2", "ext3", "ext4", "fat", "msdos", "ntfs", "vfat", "xfs" ]
    quiet: yes

- name: test if storage_partitions is set correctly
  ansible.builtin.assert:
    that:
      - storage_partitions is iterable
    quiet: yes
  when:
    - storage_partitions is defined

- name: test if storage_partitions.name is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
    quiet: yes
  loop: "{{ storage_partitions }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_partitions is defined

- name: test if storage_partitions.number is set correctly
  ansible.builtin.assert:
    that:
      - item.number is defined
      - item.number is number
      - item.number > 0
    quiet: yes
  loop: "{{ storage_partitions }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_partitions is defined

- name: test if storage_partitions.part_end is set correctly
  ansible.builtin.assert:
    that:
      - item.part_end is defined
      - item.part_end is string
    quiet: yes
  loop: "{{ storage_partitions }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_partitions is defined

- name: test if storage_volumegroups is set correctly
  ansible.builtin.assert:
    that:
      - storage_volumegroups is iterable
    quiet: yes
  when:
    - storage_volumegroups is defined

- name: test if storage_volumegroups.name is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
    quiet: yes
  loop: "{{ storage_volumegroups }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_volumegroups is defined

- name: test if storage_volumegroups.devices is set correctly
  ansible.builtin.assert:
    that:
      - item.devices is defined
      - item.devices is iterable
    quiet: yes
  loop: "{{ storage_volumegroups }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_volumegroups is defined

- name: test if storage_volumegroups.size is set correctly
  ansible.builtin.assert:
    that:
      - item.size is number
      - item.size > 0
    quiet: yes
  loop: "{{ storage_volumegroups }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_volumegroups is defined
    - item.size is defined

- name: test if storage_volumes is set correctly
  ansible.builtin.assert:
    that:
      - storage_volumes is iterable
    quiet: yes
  when:
    - storage_volumes is defined

- name: test if storage_volumes.name is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
    quiet: yes
  loop: "{{ storage_volumes }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_volumes is defined

- name: test if storage_volumes.vg is set correctly
  ansible.builtin.assert:
    that:
      - item.vg is defined
      - item.vg is string
    quiet: yes
  loop: "{{ storage_volumes }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_volumes is defined

- name: test if storage_volumes.size is set correctly
  ansible.builtin.assert:
    that:
      - item.size is defined
    quiet: yes
  loop: "{{ storage_volumes }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_volumes is defined

- name: test if storage_filesystems is set correctly
  ansible.builtin.assert:
    that:
      - storage_filesystems is iterable
    quiet: yes
  when:
    - storage_filesystems is defined

- name: test if storage_filesystems.name is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
    quiet: yes
  loop: "{{ storage_filesystems }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_filesystems is defined

- name: test if storage_filesystems.filesystem is set correctly
  ansible.builtin.assert:
    that:
      - item.filesystem is defined
      - item.filesystem is string
      - storage_default_fstype in [ "btrfs", "cramfs", "ext2", "ext3", "ext4", "fat", "msdos", "ntfs", "vfat", "xfs" ]
    quiet: yes
  loop: "{{ storage_filesystems }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_filesystems is defined

- name: test if storage_mounts is set correctly
  ansible.builtin.assert:
    that:
      - storage_mounts is iterable
    quiet: yes
  when:
    - storage_mounts is defined

- name: test if storage_mounts.name is set correctly
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
    quiet: yes
  loop: "{{ storage_mounts }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_mounts is defined

- name: test if storage_mounts.src is set correctly
  ansible.builtin.assert:
    that:
      - item.src is defined
      - item.src is string
    quiet: yes
  loop: "{{ storage_mounts }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - storage_mounts is defined
